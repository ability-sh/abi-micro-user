// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: uv-pb-user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	//*
	// 创建用户
	UserCreate(ctx context.Context, in *UserCreateTask, opts ...grpc.CallOption) (*UserResult, error)
	//*
	// 修改用户
	UserSet(ctx context.Context, in *UserSetTask, opts ...grpc.CallOption) (*UserResult, error)
	//*
	// 获取单个用户
	UserGet(ctx context.Context, in *UserGetTask, opts ...grpc.CallOption) (*UserResult, error)
	//*
	// 查询多个用户
	UserQuery(ctx context.Context, in *UserQueryTask, opts ...grpc.CallOption) (*UserQueryResult, error)
	//*
	// 设置用户信息
	InfoSet(ctx context.Context, in *InfoSetTask, opts ...grpc.CallOption) (*InfoResult, error)
	//*
	// 获取用户信息
	InfoGet(ctx context.Context, in *InfoGetTask, opts ...grpc.CallOption) (*InfoResult, error)
	//*
	// 登录
	Login(ctx context.Context, in *LoginTask, opts ...grpc.CallOption) (*LoginResult, error)
	//*
	// 批量获取用户
	UserBatchGet(ctx context.Context, in *UserBatchGetTask, opts ...grpc.CallOption) (*UserBatchGetResult, error)
	//*
	// 批量获取用户信息
	InfoBatchGet(ctx context.Context, in *InfoBatchGetTask, opts ...grpc.CallOption) (*InfoBatchGetResult, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) UserCreate(ctx context.Context, in *UserCreateTask, opts ...grpc.CallOption) (*UserResult, error) {
	out := new(UserResult)
	err := c.cc.Invoke(ctx, "/user.Service/UserCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UserSet(ctx context.Context, in *UserSetTask, opts ...grpc.CallOption) (*UserResult, error) {
	out := new(UserResult)
	err := c.cc.Invoke(ctx, "/user.Service/UserSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UserGet(ctx context.Context, in *UserGetTask, opts ...grpc.CallOption) (*UserResult, error) {
	out := new(UserResult)
	err := c.cc.Invoke(ctx, "/user.Service/UserGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UserQuery(ctx context.Context, in *UserQueryTask, opts ...grpc.CallOption) (*UserQueryResult, error) {
	out := new(UserQueryResult)
	err := c.cc.Invoke(ctx, "/user.Service/UserQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) InfoSet(ctx context.Context, in *InfoSetTask, opts ...grpc.CallOption) (*InfoResult, error) {
	out := new(InfoResult)
	err := c.cc.Invoke(ctx, "/user.Service/InfoSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) InfoGet(ctx context.Context, in *InfoGetTask, opts ...grpc.CallOption) (*InfoResult, error) {
	out := new(InfoResult)
	err := c.cc.Invoke(ctx, "/user.Service/InfoGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Login(ctx context.Context, in *LoginTask, opts ...grpc.CallOption) (*LoginResult, error) {
	out := new(LoginResult)
	err := c.cc.Invoke(ctx, "/user.Service/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UserBatchGet(ctx context.Context, in *UserBatchGetTask, opts ...grpc.CallOption) (*UserBatchGetResult, error) {
	out := new(UserBatchGetResult)
	err := c.cc.Invoke(ctx, "/user.Service/UserBatchGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) InfoBatchGet(ctx context.Context, in *InfoBatchGetTask, opts ...grpc.CallOption) (*InfoBatchGetResult, error) {
	out := new(InfoBatchGetResult)
	err := c.cc.Invoke(ctx, "/user.Service/InfoBatchGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations should embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	//*
	// 创建用户
	UserCreate(context.Context, *UserCreateTask) (*UserResult, error)
	//*
	// 修改用户
	UserSet(context.Context, *UserSetTask) (*UserResult, error)
	//*
	// 获取单个用户
	UserGet(context.Context, *UserGetTask) (*UserResult, error)
	//*
	// 查询多个用户
	UserQuery(context.Context, *UserQueryTask) (*UserQueryResult, error)
	//*
	// 设置用户信息
	InfoSet(context.Context, *InfoSetTask) (*InfoResult, error)
	//*
	// 获取用户信息
	InfoGet(context.Context, *InfoGetTask) (*InfoResult, error)
	//*
	// 登录
	Login(context.Context, *LoginTask) (*LoginResult, error)
	//*
	// 批量获取用户
	UserBatchGet(context.Context, *UserBatchGetTask) (*UserBatchGetResult, error)
	//*
	// 批量获取用户信息
	InfoBatchGet(context.Context, *InfoBatchGetTask) (*InfoBatchGetResult, error)
}

// UnimplementedServiceServer should be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) UserCreate(context.Context, *UserCreateTask) (*UserResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCreate not implemented")
}
func (UnimplementedServiceServer) UserSet(context.Context, *UserSetTask) (*UserResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSet not implemented")
}
func (UnimplementedServiceServer) UserGet(context.Context, *UserGetTask) (*UserResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGet not implemented")
}
func (UnimplementedServiceServer) UserQuery(context.Context, *UserQueryTask) (*UserQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserQuery not implemented")
}
func (UnimplementedServiceServer) InfoSet(context.Context, *InfoSetTask) (*InfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfoSet not implemented")
}
func (UnimplementedServiceServer) InfoGet(context.Context, *InfoGetTask) (*InfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfoGet not implemented")
}
func (UnimplementedServiceServer) Login(context.Context, *LoginTask) (*LoginResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedServiceServer) UserBatchGet(context.Context, *UserBatchGetTask) (*UserBatchGetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserBatchGet not implemented")
}
func (UnimplementedServiceServer) InfoBatchGet(context.Context, *InfoBatchGetTask) (*InfoBatchGetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfoBatchGet not implemented")
}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_UserCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreateTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UserCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Service/UserCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UserCreate(ctx, req.(*UserCreateTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UserSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSetTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UserSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Service/UserSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UserSet(ctx, req.(*UserSetTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UserGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGetTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UserGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Service/UserGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UserGet(ctx, req.(*UserGetTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UserQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserQueryTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UserQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Service/UserQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UserQuery(ctx, req.(*UserQueryTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_InfoSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoSetTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).InfoSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Service/InfoSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).InfoSet(ctx, req.(*InfoSetTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_InfoGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoGetTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).InfoGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Service/InfoGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).InfoGet(ctx, req.(*InfoGetTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Service/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Login(ctx, req.(*LoginTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UserBatchGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBatchGetTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UserBatchGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Service/UserBatchGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UserBatchGet(ctx, req.(*UserBatchGetTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_InfoBatchGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoBatchGetTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).InfoBatchGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Service/InfoBatchGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).InfoBatchGet(ctx, req.(*InfoBatchGetTask))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserCreate",
			Handler:    _Service_UserCreate_Handler,
		},
		{
			MethodName: "UserSet",
			Handler:    _Service_UserSet_Handler,
		},
		{
			MethodName: "UserGet",
			Handler:    _Service_UserGet_Handler,
		},
		{
			MethodName: "UserQuery",
			Handler:    _Service_UserQuery_Handler,
		},
		{
			MethodName: "InfoSet",
			Handler:    _Service_InfoSet_Handler,
		},
		{
			MethodName: "InfoGet",
			Handler:    _Service_InfoGet_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Service_Login_Handler,
		},
		{
			MethodName: "UserBatchGet",
			Handler:    _Service_UserBatchGet_Handler,
		},
		{
			MethodName: "InfoBatchGet",
			Handler:    _Service_InfoBatchGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uv-pb-user.proto",
}
